/*
This file is part of TSODLULS library.

TSODLULS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

TSODLULS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with TSODLULS.  If not, see <http://www.gnu.org/licenses/>.

Â©Copyright 2018-2021 Laurent Lyaudet
*/

//This file was generated by generateCompetitors.php script.



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * Qsort from glibc inlined with long cells.
 */
int TSODLULS_qsort_inlined__long_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most TSODLULS_MAX_THRESH (5 for example), we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark1_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_1_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_2_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_3_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_4_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_5_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_6_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_7_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_8_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_9_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_10_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_11_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_12_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_13_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_14_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_15_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 */
int TSODLULS_sort_radix8_count_insertion__mark2_16_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_1_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_2_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_3_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_4_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_5_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_6_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_7_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_8_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_9_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_10_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_11_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_12_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_13_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_14_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_15_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant).
 */
int TSODLULS_sort_radix8_count_insertion__mark3_16_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_1_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_2_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_3_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_4_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_5_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_6_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_7_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_8_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_9_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_10_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_11_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_12_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_13_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_14_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_15_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_1(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_2(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_3(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_4(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_5(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_6(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_7(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_8(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_9(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_10(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_11(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_12(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_13(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_14(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_15(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



/**
 * Sorting functions for long nextified strings
 * A stable sorting algorithm for nextified strings based on radix sort with octets digits
 * and counting sort as a subroutine.
 * When the number of elements to sort is at most:
 *   - TSODLULS_MAX_THRESH (5 for example),
 *   - or TSODLULS_MAX_THRESH_SEQUEL (2 for example) for radix sequel,
 * we use insertion sort.
 * No data move if the array is already sorted (code variant, double loop).
 */
int TSODLULS_sort_radix8_count_insertion__mark4_16_16(
  t_TSODLULS_sort_element* arr_elements,
  size_t i_number_of_elements
);



