<?php
/*
This file is part of TSODLULS.

TSODLULS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

TSODLULS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with TSODLULS.  If not, see <http://www.gnu.org/licenses/>.

Â©Copyright 2018-2021 Laurent Lyaudet
*/

include('competitorsListByFile.php');



function getSParametersStringForFunctionName($arrParameters){
  $sParameters = '';
  foreach($arrParameters as $parameter){
    $sParameters .= '_';
    if(is_array($parameter)){
      $sParameters .= $parameter['value_for_function_name'];
    }
    else{
      $sParameters .= $parameter;
    }
  }
  return $sParameters;
}// end function getSParametersStringForFunctionName()



function getSSignatureForFunctionAndParameters(
  $arrFunctionData,
  $sParameters
){
  static $arrArgumentsByCellType = array(
    'direct' => "  void* arr_elements,\n"
               ."  size_t i_number_of_elements,\n"
               ."  size_t i_element_size,\n"
               ."  t_comparison_function fn_comparison\n",
    'long' => "  t_TSODLULS_sort_element* arr_elements,\n"
             ."  size_t i_number_of_elements\n",
    'short' => "  t_TSODLULS_sort_element__short* arr_elements,\n"
              ."  size_t i_number_of_elements\n",
  );
  return $arrFunctionData['return_type'].' '.$arrFunctionData['function'].$sParameters."(\n"
        .$arrArgumentsByCellType[$arrFunctionData['celltype']]
        .")";
}//end function getSSignatureForFunctionAndParameters()



function getSHeaderForFunctionAndParameters(
  $arrFunctionData,
  $sParameters
){
  return getSSignatureForFunctionAndParameters($arrFunctionData, $sParameters).";\n\n\n\n";
}//end function getSHeaderForFunctionAndParameters()



function getSCodeForFunctionAndParametersValues(
  $arrFunctionData,
  $arrParameters,
  $sParameters
){
  $sCode = getSSignatureForFunctionAndParameters($arrFunctionData, $sParameters)."{\n";
  for($i = 0, $iMax = count($arrParameters); $i < $iMax; ++$i){
    $sCode .= '  #define '.$arrFunctionData['parameters'][$i]['macro'].' ';
    if(is_array($arrParameters[$i])){
      $sCode .= $arrParameters[$i]['value_for_macro_def'];
    }
    else{
      $sCode .= $arrParameters[$i];
    }
    $sCode .= "\n";
  }
  $sCode .= '  #include "./b/body_'.$arrFunctionData['function'].'.c"'."\n";
  for($i = 0, $iMax = count($arrParameters); $i < $iMax; ++$i){
    $sCode .= '  #undef '.$arrFunctionData['parameters'][$i]['macro']."\n";
  }
  $sCode .= '}//end function '.$arrFunctionData['function'].$sParameters."()\n\n\n\n";
  return $sCode;
}//end function getSCodeForFunctionAndParametersValues()



function getNextParameterValue($currentValue, $arrParameterData){
  switch($arrParameterData['type']){
    case 'integer_range':
      if($currentValue === null){
        return $arrParameterData['min_value'];
      }
      if($currentValue + 1 <= $arrParameterData['max_value']){
        return $currentValue + 1;
      }
    break;
  }
  return null;
}//end function getNextParameterValue()



$sLicense = file_get_contents('TSODLULS_license.tpl');

foreach($arrArrCompetitorsListByFile as $sFile => $arrFileData){
  $sHeaderContent =
      $sLicense
     ."\n//This file was generated by generateCompetitors.php script.\n\n\n\n"
     .$arrFileData['header_head']
  ;
  $sCodeContent =
      $sLicense
     ."\n//This file was generated by generateCompetitors.php script.\n\n\n\n"
     .$arrFileData['code_head']
  ;
  foreach($arrFileData['functions'] as $arrFunctionData){
    $sFunctionComment = "/**\n"
                       .$arrFileData['functions_section_header']
                       .$arrFunctionData['function_comment']
                       ." */\n";
    if(!isset($arrFunctionData['parameters'])){
      $sHeaderContent .= $sFunctionComment.getSHeaderForFunctionAndParameters(
         $arrFunctionData,
         ''
      );
      $sCodeContent .= $sFunctionComment.getSCodeForFunctionAndParametersValues(
         $arrFunctionData,
         [],
         ''
      );
      continue;
    }
    $arrCurrentParameters = array();
    $iMaxParameters = count($arrFunctionData['parameters']) - 1;
    for($i = 0; $i <= $iMaxParameters; ++$i){
      $arrCurrentParameters[$i] = getNextParameterValue(
          null,
          $arrFunctionData['parameters'][$i]
      );
    }
    $sParameters = getSParametersStringForFunctionName($arrCurrentParameters);
    $sHeaderContent .= $sFunctionComment.getSHeaderForFunctionAndParameters(
        $arrFunctionData,
        $sParameters
    );
    $sCodeContent .= $sFunctionComment.getSCodeForFunctionAndParametersValues(
        $arrFunctionData,
        $arrCurrentParameters,
        $sParameters
    );

    $iCurrentParameterIndex = $iMaxParameters;
    while(true){
      $arrCurrentParameters[$iCurrentParameterIndex] = getNextParameterValue(
          $arrCurrentParameters[$iCurrentParameterIndex],
          $arrFunctionData['parameters'][$iCurrentParameterIndex]
      );
      if($arrCurrentParameters[$iCurrentParameterIndex] === null){
        if($iCurrentParameterIndex === 0){
          break;
        }
        --$iCurrentParameterIndex;
      }
      else{
        if($iCurrentParameterIndex === $iMaxParameters){
          $sParameters = getSParametersStringForFunctionName($arrCurrentParameters);
          $sHeaderContent .= $sFunctionComment.getSHeaderForFunctionAndParameters(
              $arrFunctionData,
              $sParameters
          );
          $sCodeContent .= $sFunctionComment.getSCodeForFunctionAndParametersValues(
              $arrFunctionData,
              $arrCurrentParameters,
              $sParameters
          );
        }
        else{
          ++$iCurrentParameterIndex;
        }
      }
    }
  }//end foreach($arrFileData['functions'] as $arrFunctionData)

  $sHeaderContent .= $arrFileData['header_tail'];
  $sCodeContent .= $arrFileData['code_tail'];

  if(!file_put_contents('../'.$sFile.'.h', $sHeaderContent)){
    die('Writing file ../'.$sFile.'.h failed.');
  }

  if(!file_put_contents('../'.$sFile.'.c', $sCodeContent)){
    die('Writing file ../'.$sFile.'.c failed.');
  }
}//end foreach($arrArrCompetitorsListByFile as $sFile => $arrFileData)

?>

